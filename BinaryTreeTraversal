
class Node {
    let val : Int
    var left : Node?
    var right: Node?
    init(val: Int) {
        self.val = val
    }
}

class Tree {
    init() {
        let root = makeTree()
//        print("printPreOrder\\\\")
//        printPreOrder(root: root)
//        print("printPostOrder\\\\")
//        printPostOrder(root: root)
//        print("printInOrder\\\\")
//        printInOrder(root: root)
        print("printLeftToRightLevelOrder\\\\")
        printLeftToRightLevelOrder(root: root)
        print("printRightToLeftLevelOrder\\\\")
        printRightToLeftLevelOrder(root: root)
        print("printLeftToRightAlternetLevelOrder\\\\")
        printLeftToRightAlternetLevelOrder(root: root)
    }

    func makeTree() -> Node {
        let n1 = Node(val: 1)
        let n2 = Node(val: 2)
        let n3 = Node(val: 3)
        let n4 = Node(val: 4)
        let n5 = Node(val: 5)
        let n6 = Node(val: 6)
        let n7 = Node(val: 7)
        let n8 = Node(val: 8)
        let n9 = Node(val: 9)
        let n10 = Node(val: 10)
        let n11 = Node(val: 11)

        n2.left = n4
        n2.right = n5

        n9.left = n10
        n9.right = n11
        n7.right = n8
        n8.left = n9
        n3.left = n6
        n3.right = n7

        n1.left = n2
        n1.right = n3
        return n1
    }

    func printPreOrder(root:Node?) {
        if root != nil {
            print("\(root!.val)  ")
            printPreOrder(root: root!.left)
            printPreOrder(root: root!.right)
        }
    }

    func printPostOrder(root:Node?) {
        if root != nil {
            printPostOrder(root: root!.left)
            printPostOrder(root: root!.right)
            print("\(root!.val)  ")
        }
    }

    func printInOrder(root:Node?) {
        if root != nil {
            printInOrder(root: root!.left)
            print("\(root!.val)  ")
            printInOrder(root: root!.right)
        }
    }

    func printLeftToRightLevelOrder(root:Node?) {
        var queue = [Node?]()
        if let rNode = root {
            queue.append(rNode)
            queue.append(nil)
        }
        while queue.count > 0 {
            if let node = queue.first as? Node {
                queue.removeFirst()
                print("\(node.val)")
                if let left = node.left {
                    queue.append(left)
                }
                if let right = node.right {
                    queue.append(right)
                }
            } else {
                queue.removeFirst()
                print("next level")
                if queue.count > 0 {
                    queue.append(nil)
                }
            }
        }
    }

    func printRightToLeftLevelOrder(root:Node?) {
        var queue = [Node?]()
        if let rNode = root {
            queue.append(rNode)
            queue.append(nil)
        }
        while queue.count > 0 {
            if let node = queue.first as? Node {
                queue.removeFirst()
                print("\(node.val)")
                if let right = node.right {
                    queue.append(right)
                }
                if let left = node.left {
                    queue.append(left)
                }
            } else {
                queue.removeFirst()
                print("next level")
                if queue.count > 0 {
                    queue.append(nil)
                }
            }
        }
    }

    func printLeftToRightAlternetLevelOrder(root:Node?) {
        var ltrStack = [Node?]()
        var rtlStack = [Node?]()

        var leftToRight = true
        if let rnode = root {
            ltrStack.append(rnode)
        }

        while ltrStack.count > 0 || rtlStack.count > 0 {
            if leftToRight {
                print("left to right level")
                while ltrStack.count > 0 {
                    if let node = ltrStack.last as? Node {
                        ltrStack.removeLast()
                        print(node.val)
                        if let left = node.left {
                            rtlStack.append(left)
                        }
                        if let right = node.right {
                            rtlStack.append(right)
                        }
                    }
                }
                leftToRight = !leftToRight
            } else {
                print("right to left level")
                while rtlStack.count > 0 {
                    if let node = rtlStack.last as? Node {
                        rtlStack.removeLast()
                        print(node.val)
                        if let right = node.right {
                            ltrStack.append(right)
                        }
                        if let left = node.left {
                            ltrStack.append(left)
                        }
                    }
                }
                leftToRight = !leftToRight
            }
        }
    }
}


 var dict = [Int:[Int]]()
    func printVerticalOrder(root:Node?, index:Int){
        if root != nil {
            printVerticalOrder(root: root!.left, index: index-1)
            if dict[index] != nil {
                var temp = dict[index]!
                temp.append(root!.val)
                dict[index] = temp
            } else {
                dict[index] = [root!.val]
            }
            printVerticalOrder(root: root!.right, index: index+1)
        }
    }

    func printVertical45Degree(root:Node?,index:Int){
        if root != nil {
            printVertical45Degree(root: root!.left, index: index)
            if dict[index] != nil {
                var temp = dict[index]!
                temp.append(root!.val)
                dict[index] = temp
            } else {
                dict[index] = [root!.val]
            }
            printVertical45Degree(root: root!.right, index: index+1)
        }
    }



